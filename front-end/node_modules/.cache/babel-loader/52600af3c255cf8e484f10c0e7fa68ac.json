{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/a1234/Desktop/projects/face-detection-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/a1234/Desktop/projects/face-detection-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/a1234/Desktop/projects/face-detection-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/a1234/Desktop/projects/face-detection-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particles = void 0;\n\nvar Particle_1 = require(\"./Particle\");\n\nvar Utils_1 = require(\"../Utils\");\n\nvar InteractionManager_1 = require(\"./InteractionManager\");\n\nvar ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\n\nvar Particles = /*#__PURE__*/function () {\n  function Particles(container) {\n    _classCallCheck(this, Particles);\n\n    this.container = container;\n    this.nextId = 0;\n    this.array = [];\n    this.zArray = [];\n    this.limit = 0;\n    this.needsSort = false;\n    this.lastZIndex = 0;\n    this.linksFreq = new Map();\n    this.trianglesFreq = new Map();\n    this.interactionManager = new InteractionManager_1.InteractionManager(container);\n    var canvasSize = this.container.canvas.size;\n    this.linksColors = new Map();\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n  }\n\n  _createClass(Particles, [{\n    key: \"count\",\n    get: function get() {\n      return this.array.length;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _a;\n\n      var container = this.container;\n      var options = container.actualOptions;\n      this.lastZIndex = 0;\n      this.needsSort = false;\n      this.linksFreq = new Map();\n      this.trianglesFreq = new Map();\n      var handled = false;\n\n      var _iterator = _createForOfIteratorHelper(container.plugins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              plugin = _step$value[1];\n\n          if (plugin.particlesInitialization !== undefined) {\n            handled = plugin.particlesInitialization();\n          }\n\n          if (handled) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.addManualParticles();\n\n      if (!handled) {\n        for (var group in options.particles.groups) {\n          var groupOptions = options.particles.groups[group];\n\n          for (var i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n            this.addParticle(undefined, groupOptions, group);\n          }\n        }\n\n        for (var _i = this.count; _i < options.particles.number.value; _i++) {\n          this.addParticle();\n        }\n      }\n\n      container.pathGenerator.init();\n    }\n  }, {\n    key: \"redraw\",\n    value: function redraw() {\n      this.clear();\n      this.init();\n      this.draw({\n        value: 0,\n        factor: 0\n      });\n    }\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(index) {\n      var quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var group = arguments.length > 2 ? arguments[2] : undefined;\n      var override = arguments.length > 3 ? arguments[3] : undefined;\n\n      if (!(index >= 0 && index <= this.count)) {\n        return;\n      }\n\n      var deleted = 0;\n\n      for (var i = index; deleted < quantity && i < this.count; i++) {\n        var particle = this.array[i];\n\n        if (!particle || particle.group !== group) {\n          continue;\n        }\n\n        particle.destroy(override);\n        this.array.splice(i--, 1);\n        var zIdx = this.zArray.indexOf(particle);\n        this.zArray.splice(zIdx, 1);\n        deleted++;\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(particle, group, override) {\n      this.removeAt(this.array.indexOf(particle), undefined, group, override);\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      var container = this.container;\n      var particlesToDelete = [];\n      container.pathGenerator.update();\n\n      var _iterator2 = _createForOfIteratorHelper(container.plugins),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              plugin = _step2$value[1];\n\n          if (plugin.update !== undefined) {\n            plugin.update(delta);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(this.array),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _particle = _step3.value;\n          var resizeFactor = this.container.canvas.resizeFactor;\n\n          if (resizeFactor) {\n            _particle.position.x *= resizeFactor.width;\n            _particle.position.y *= resizeFactor.height;\n          }\n\n          var _iterator5 = _createForOfIteratorHelper(this.container.plugins),\n              _step5;\n\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var _step5$value = _slicedToArray(_step5.value, 2),\n                  _plugin = _step5$value[1];\n\n              if (_particle.destroyed) {\n                break;\n              }\n\n              if (_plugin.particleUpdate) {\n                _plugin.particleUpdate(_particle, delta);\n              }\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n\n          _particle.move(delta);\n\n          if (_particle.destroyed) {\n            particlesToDelete.push(_particle);\n            continue;\n          }\n\n          this.quadTree.insert(new Utils_1.Point(_particle.getPosition(), _particle));\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      for (var _i2 = 0, _particlesToDelete = particlesToDelete; _i2 < _particlesToDelete.length; _i2++) {\n        var particle = _particlesToDelete[_i2];\n        this.remove(particle);\n      }\n\n      this.interactionManager.externalInteract(delta);\n\n      var _iterator4 = _createForOfIteratorHelper(this.container.particles.array),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _particle2 = _step4.value;\n\n          _particle2.update(delta);\n\n          if (!_particle2.destroyed && !_particle2.spawning) {\n            this.interactionManager.particlesInteract(_particle2, delta);\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      delete container.canvas.resizeFactor;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(delta) {\n      var container = this.container;\n      container.canvas.clear();\n      var canvasSize = this.container.canvas.size;\n      this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n      this.update(delta);\n\n      if (this.needsSort) {\n        this.zArray.sort(function (a, b) {\n          return b.position.z - a.position.z || a.id - b.id;\n        });\n        this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n        this.needsSort = false;\n      }\n\n      var _iterator6 = _createForOfIteratorHelper(container.plugins),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _step6$value = _slicedToArray(_step6.value, 2),\n              plugin = _step6$value[1];\n\n          container.canvas.drawPlugin(plugin, delta);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      var _iterator7 = _createForOfIteratorHelper(this.zArray),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var p = _step7.value;\n          p.draw(delta);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.array = [];\n      this.zArray = [];\n    }\n  }, {\n    key: \"push\",\n    value: function push(nb, mouse, overrideOptions, group) {\n      this.pushing = true;\n\n      for (var i = 0; i < nb; i++) {\n        this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n      }\n\n      this.pushing = false;\n    }\n  }, {\n    key: \"addParticle\",\n    value: function addParticle(position, overrideOptions, group) {\n      var container = this.container;\n      var options = container.actualOptions;\n      var limit = options.particles.number.limit * container.density;\n\n      if (limit > 0) {\n        var countToRemove = this.count + 1 - limit;\n\n        if (countToRemove > 0) {\n          this.removeQuantity(countToRemove);\n        }\n      }\n\n      return this.pushParticle(position, overrideOptions, group);\n    }\n  }, {\n    key: \"addSplitParticle\",\n    value: function addSplitParticle(parent) {\n      var splitOptions = parent.options.destroy.split;\n      var options = new ParticlesOptions_1.ParticlesOptions();\n      options.load(parent.options);\n      var factor = Utils_1.getRangeValue(splitOptions.factor.value);\n      options.color.load({\n        value: {\n          hsl: parent.getFillColor()\n        }\n      });\n\n      if (typeof options.size.value === \"number\") {\n        options.size.value /= factor;\n      } else {\n        options.size.value.min /= factor;\n        options.size.value.max /= factor;\n      }\n\n      options.load(splitOptions.particles);\n      var offset = splitOptions.sizeOffset ? Utils_1.setRangeValue(-parent.size.value, parent.size.value) : 0;\n      var position = {\n        x: parent.position.x + Utils_1.randomInRange(offset),\n        y: parent.position.y + Utils_1.randomInRange(offset)\n      };\n      return this.pushParticle(position, options, parent.group, function (particle) {\n        if (particle.size.value < 0.5) {\n          return false;\n        }\n\n        particle.velocity.length = Utils_1.randomInRange(Utils_1.setRangeValue(parent.velocity.length, particle.velocity.length));\n        particle.splitCount = parent.splitCount + 1;\n        particle.unbreakable = true;\n        setTimeout(function () {\n          particle.unbreakable = false;\n        }, 500);\n        return true;\n      });\n    }\n  }, {\n    key: \"removeQuantity\",\n    value: function removeQuantity(quantity, group) {\n      this.removeAt(0, quantity, group);\n    }\n  }, {\n    key: \"getLinkFrequency\",\n    value: function getLinkFrequency(p1, p2) {\n      var key = \"\".concat(Math.min(p1.id, p2.id), \"_\").concat(Math.max(p1.id, p2.id));\n      var res = this.linksFreq.get(key);\n\n      if (res === undefined) {\n        res = Math.random();\n        this.linksFreq.set(key, res);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"getTriangleFrequency\",\n    value: function getTriangleFrequency(p1, p2, p3) {\n      var _ref = [p1.id, p2.id, p3.id],\n          id1 = _ref[0],\n          id2 = _ref[1],\n          id3 = _ref[2];\n\n      if (id1 > id2) {\n        var _ref2 = [id1, id2];\n        id2 = _ref2[0];\n        id1 = _ref2[1];\n      }\n\n      if (id2 > id3) {\n        var _ref3 = [id2, id3];\n        id3 = _ref3[0];\n        id2 = _ref3[1];\n      }\n\n      if (id1 > id3) {\n        var _ref4 = [id1, id3];\n        id3 = _ref4[0];\n        id1 = _ref4[1];\n      }\n\n      var key = \"\".concat(id1, \"_\").concat(id2, \"_\").concat(id3);\n      var res = this.trianglesFreq.get(key);\n\n      if (res === undefined) {\n        res = Math.random();\n        this.trianglesFreq.set(key, res);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"addManualParticles\",\n    value: function addManualParticles() {\n      var container = this.container;\n      var options = container.actualOptions;\n\n      var _iterator8 = _createForOfIteratorHelper(options.manualParticles),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var particle = _step8.value;\n          var pos = particle.position ? {\n            x: particle.position.x * container.canvas.size.width / 100,\n            y: particle.position.y * container.canvas.size.height / 100\n          } : undefined;\n          this.addParticle(pos, particle.options);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n  }, {\n    key: \"setDensity\",\n    value: function setDensity() {\n      var options = this.container.actualOptions;\n\n      for (var group in options.particles.groups) {\n        this.applyDensity(options.particles.groups[group], 0, group);\n      }\n\n      this.applyDensity(options.particles, options.manualParticles.length);\n    }\n  }, {\n    key: \"applyDensity\",\n    value: function applyDensity(options, manualCount, group) {\n      var _a;\n\n      if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n        return;\n      }\n\n      var numberOptions = options.number;\n      var densityFactor = this.initDensityFactor(numberOptions.density);\n      var optParticlesNumber = numberOptions.value;\n      var optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n      var particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount;\n      var particlesCount = Math.min(this.count, this.array.filter(function (t) {\n        return t.group === group;\n      }).length);\n      this.limit = numberOptions.limit * densityFactor;\n\n      if (particlesCount < particlesNumber) {\n        this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n      } else if (particlesCount > particlesNumber) {\n        this.removeQuantity(particlesCount - particlesNumber, group);\n      }\n    }\n  }, {\n    key: \"initDensityFactor\",\n    value: function initDensityFactor(densityOptions) {\n      var container = this.container;\n\n      if (!container.canvas.element || !densityOptions.enable) {\n        return 1;\n      }\n\n      var canvas = container.canvas.element;\n      var pxRatio = container.retina.pixelRatio;\n      return canvas.width * canvas.height / (densityOptions.factor * Math.pow(pxRatio, 2) * densityOptions.area);\n    }\n  }, {\n    key: \"pushParticle\",\n    value: function pushParticle(position, overrideOptions, group, initializer) {\n      try {\n        var particle = new Particle_1.Particle(this.nextId, this.container, position, overrideOptions, group);\n        var canAdd = true;\n\n        if (initializer) {\n          canAdd = initializer(particle);\n        }\n\n        if (!canAdd) {\n          return;\n        }\n\n        this.array.push(particle);\n        this.zArray.push(particle);\n        this.nextId++;\n        return particle;\n      } catch (e) {\n        console.warn(\"error adding particle: \".concat(e));\n        return;\n      }\n    }\n  }]);\n\n  return Particles;\n}();\n\nexports.Particles = Particles;","map":{"version":3,"sources":["/Users/a1234/Desktop/projects/face-detection-app/node_modules/tsparticles/Core/Particles.js"],"names":["Object","defineProperty","exports","value","Particles","Particle_1","require","Utils_1","InteractionManager_1","ParticlesOptions_1","container","nextId","array","zArray","limit","needsSort","lastZIndex","linksFreq","Map","trianglesFreq","interactionManager","InteractionManager","canvasSize","canvas","size","linksColors","quadTree","QuadTree","Rectangle","width","height","length","_a","options","actualOptions","handled","plugins","plugin","particlesInitialization","undefined","addManualParticles","group","particles","groups","groupOptions","i","count","j","number","addParticle","pathGenerator","init","clear","draw","factor","index","quantity","override","deleted","particle","destroy","splice","zIdx","indexOf","removeAt","delta","particlesToDelete","update","resizeFactor","position","x","y","destroyed","particleUpdate","move","push","insert","Point","getPosition","remove","externalInteract","spawning","particlesInteract","sort","a","b","z","id","drawPlugin","p","nb","mouse","overrideOptions","pushing","density","countToRemove","removeQuantity","pushParticle","parent","splitOptions","split","ParticlesOptions","load","getRangeValue","color","hsl","getFillColor","min","max","offset","sizeOffset","setRangeValue","randomInRange","velocity","splitCount","unbreakable","setTimeout","p1","p2","key","Math","res","get","random","set","p3","id1","id2","id3","manualParticles","pos","applyDensity","manualCount","enable","numberOptions","densityFactor","initDensityFactor","optParticlesNumber","optParticlesLimit","particlesNumber","particlesCount","filter","t","abs","densityOptions","element","pxRatio","retina","pixelRatio","pow","area","initializer","Particle","canAdd","e","console","warn"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particles = void 0;\nconst Particle_1 = require(\"./Particle\");\nconst Utils_1 = require(\"../Utils\");\nconst InteractionManager_1 = require(\"./InteractionManager\");\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nclass Particles {\n    constructor(container) {\n        this.container = container;\n        this.nextId = 0;\n        this.array = [];\n        this.zArray = [];\n        this.limit = 0;\n        this.needsSort = false;\n        this.lastZIndex = 0;\n        this.linksFreq = new Map();\n        this.trianglesFreq = new Map();\n        this.interactionManager = new InteractionManager_1.InteractionManager(container);\n        const canvasSize = this.container.canvas.size;\n        this.linksColors = new Map();\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n    }\n    get count() {\n        return this.array.length;\n    }\n    init() {\n        var _a;\n        const container = this.container;\n        const options = container.actualOptions;\n        this.lastZIndex = 0;\n        this.needsSort = false;\n        this.linksFreq = new Map();\n        this.trianglesFreq = new Map();\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        this.addManualParticles();\n        if (!handled) {\n            for (const group in options.particles.groups) {\n                const groupOptions = options.particles.groups[group];\n                for (let i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n                    this.addParticle(undefined, groupOptions, group);\n                }\n            }\n            for (let i = this.count; i < options.particles.number.value; i++) {\n                this.addParticle();\n            }\n        }\n        container.pathGenerator.init();\n    }\n    redraw() {\n        this.clear();\n        this.init();\n        this.draw({ value: 0, factor: 0 });\n    }\n    removeAt(index, quantity = 1, group, override) {\n        if (!(index >= 0 && index <= this.count)) {\n            return;\n        }\n        let deleted = 0;\n        for (let i = index; deleted < quantity && i < this.count; i++) {\n            const particle = this.array[i];\n            if (!particle || particle.group !== group) {\n                continue;\n            }\n            particle.destroy(override);\n            this.array.splice(i--, 1);\n            const zIdx = this.zArray.indexOf(particle);\n            this.zArray.splice(zIdx, 1);\n            deleted++;\n        }\n    }\n    remove(particle, group, override) {\n        this.removeAt(this.array.indexOf(particle), undefined, group, override);\n    }\n    update(delta) {\n        const container = this.container;\n        const particlesToDelete = [];\n        container.pathGenerator.update();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.update !== undefined) {\n                plugin.update(delta);\n            }\n        }\n        for (const particle of this.array) {\n            const resizeFactor = this.container.canvas.resizeFactor;\n            if (resizeFactor) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n            }\n            for (const [, plugin] of this.container.plugins) {\n                if (particle.destroyed) {\n                    break;\n                }\n                if (plugin.particleUpdate) {\n                    plugin.particleUpdate(particle, delta);\n                }\n            }\n            particle.move(delta);\n            if (particle.destroyed) {\n                particlesToDelete.push(particle);\n                continue;\n            }\n            this.quadTree.insert(new Utils_1.Point(particle.getPosition(), particle));\n        }\n        for (const particle of particlesToDelete) {\n            this.remove(particle);\n        }\n        this.interactionManager.externalInteract(delta);\n        for (const particle of this.container.particles.array) {\n            particle.update(delta);\n            if (!particle.destroyed && !particle.spawning) {\n                this.interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete container.canvas.resizeFactor;\n    }\n    draw(delta) {\n        const container = this.container;\n        container.canvas.clear();\n        const canvasSize = this.container.canvas.size;\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        this.update(delta);\n        if (this.needsSort) {\n            this.zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n            this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n            this.needsSort = false;\n        }\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this.zArray) {\n            p.draw(delta);\n        }\n    }\n    clear() {\n        this.array = [];\n        this.zArray = [];\n    }\n    push(nb, mouse, overrideOptions, group) {\n        this.pushing = true;\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n        }\n        this.pushing = false;\n    }\n    addParticle(position, overrideOptions, group) {\n        const container = this.container;\n        const options = container.actualOptions;\n        const limit = options.particles.number.limit * container.density;\n        if (limit > 0) {\n            const countToRemove = this.count + 1 - limit;\n            if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n            }\n        }\n        return this.pushParticle(position, overrideOptions, group);\n    }\n    addSplitParticle(parent) {\n        const splitOptions = parent.options.destroy.split;\n        const options = new ParticlesOptions_1.ParticlesOptions();\n        options.load(parent.options);\n        const factor = Utils_1.getRangeValue(splitOptions.factor.value);\n        options.color.load({\n            value: {\n                hsl: parent.getFillColor(),\n            },\n        });\n        if (typeof options.size.value === \"number\") {\n            options.size.value /= factor;\n        }\n        else {\n            options.size.value.min /= factor;\n            options.size.value.max /= factor;\n        }\n        options.load(splitOptions.particles);\n        const offset = splitOptions.sizeOffset ? Utils_1.setRangeValue(-parent.size.value, parent.size.value) : 0;\n        const position = {\n            x: parent.position.x + Utils_1.randomInRange(offset),\n            y: parent.position.y + Utils_1.randomInRange(offset),\n        };\n        return this.pushParticle(position, options, parent.group, (particle) => {\n            if (particle.size.value < 0.5) {\n                return false;\n            }\n            particle.velocity.length = Utils_1.randomInRange(Utils_1.setRangeValue(parent.velocity.length, particle.velocity.length));\n            particle.splitCount = parent.splitCount + 1;\n            particle.unbreakable = true;\n            setTimeout(() => {\n                particle.unbreakable = false;\n            }, 500);\n            return true;\n        });\n    }\n    removeQuantity(quantity, group) {\n        this.removeAt(0, quantity, group);\n    }\n    getLinkFrequency(p1, p2) {\n        const key = `${Math.min(p1.id, p2.id)}_${Math.max(p1.id, p2.id)}`;\n        let res = this.linksFreq.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.linksFreq.set(key, res);\n        }\n        return res;\n    }\n    getTriangleFrequency(p1, p2, p3) {\n        let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n        if (id1 > id2) {\n            [id2, id1] = [id1, id2];\n        }\n        if (id2 > id3) {\n            [id3, id2] = [id2, id3];\n        }\n        if (id1 > id3) {\n            [id3, id1] = [id1, id3];\n        }\n        const key = `${id1}_${id2}_${id3}`;\n        let res = this.trianglesFreq.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.trianglesFreq.set(key, res);\n        }\n        return res;\n    }\n    addManualParticles() {\n        const container = this.container;\n        const options = container.actualOptions;\n        for (const particle of options.manualParticles) {\n            const pos = particle.position\n                ? {\n                    x: (particle.position.x * container.canvas.size.width) / 100,\n                    y: (particle.position.y * container.canvas.size.height) / 100,\n                }\n                : undefined;\n            this.addParticle(pos, particle.options);\n        }\n    }\n    setDensity() {\n        const options = this.container.actualOptions;\n        for (const group in options.particles.groups) {\n            this.applyDensity(options.particles.groups[group], 0, group);\n        }\n        this.applyDensity(options.particles, options.manualParticles.length);\n    }\n    applyDensity(options, manualCount, group) {\n        var _a;\n        if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n            return;\n        }\n        const numberOptions = options.number;\n        const densityFactor = this.initDensityFactor(numberOptions.density);\n        const optParticlesNumber = numberOptions.value;\n        const optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n        const particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount;\n        const particlesCount = Math.min(this.count, this.array.filter((t) => t.group === group).length);\n        this.limit = numberOptions.limit * densityFactor;\n        if (particlesCount < particlesNumber) {\n            this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n        }\n        else if (particlesCount > particlesNumber) {\n            this.removeQuantity(particlesCount - particlesNumber, group);\n        }\n    }\n    initDensityFactor(densityOptions) {\n        const container = this.container;\n        if (!container.canvas.element || !densityOptions.enable) {\n            return 1;\n        }\n        const canvas = container.canvas.element;\n        const pxRatio = container.retina.pixelRatio;\n        return (canvas.width * canvas.height) / (densityOptions.factor * Math.pow(pxRatio, 2) * densityOptions.area);\n    }\n    pushParticle(position, overrideOptions, group, initializer) {\n        try {\n            const particle = new Particle_1.Particle(this.nextId, this.container, position, overrideOptions, group);\n            let canAdd = true;\n            if (initializer) {\n                canAdd = initializer(particle);\n            }\n            if (!canAdd) {\n                return;\n            }\n            this.array.push(particle);\n            this.zArray.push(particle);\n            this.nextId++;\n            return particle;\n        }\n        catch (e) {\n            console.warn(`error adding particle: ${e}`);\n            return;\n        }\n    }\n}\nexports.Particles = Particles;\n"]},"metadata":{},"sourceType":"script"}