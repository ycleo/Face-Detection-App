{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/a1234/Desktop/projects/face-detection-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/a1234/Desktop/projects/face-detection-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/a1234/Desktop/projects/face-detection-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/a1234/Desktop/projects/face-detection-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/a1234/Desktop/projects/face-detection-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Grabber = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar Enums_1 = require(\"../../Enums\");\n\nvar ExternalInteractorBase_1 = require(\"../../Core/ExternalInteractorBase\");\n\nvar Grabber = /*#__PURE__*/function (_ExternalInteractorBa) {\n  _inherits(Grabber, _ExternalInteractorBa);\n\n  var _super = _createSuper(Grabber);\n\n  function Grabber(container) {\n    _classCallCheck(this, Grabber);\n\n    return _super.call(this, container);\n  }\n\n  _createClass(Grabber, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      var container = this.container;\n      var mouse = container.interactivity.mouse;\n      var events = container.actualOptions.interactivity.events;\n\n      if (!(events.onHover.enable && mouse.position)) {\n        return false;\n      }\n\n      var hoverMode = events.onHover.mode;\n      return Utils_1.isInArray(Enums_1.HoverMode.grab, hoverMode);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }, {\n    key: \"interact\",\n    value: function interact() {\n      var _a;\n\n      var container = this.container;\n      var options = container.actualOptions;\n      var interactivity = options.interactivity;\n\n      if (interactivity.events.onHover.enable && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n        var mousePos = container.interactivity.mouse.position;\n\n        if (mousePos === undefined) {\n          return;\n        }\n\n        var distance = container.retina.grabModeDistance;\n        var query = container.particles.quadTree.queryCircle(mousePos, distance);\n\n        var _iterator = _createForOfIteratorHelper(query),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var particle = _step.value;\n            var pos = particle.getPosition();\n            var pointDistance = Utils_1.getDistance(pos, mousePos);\n\n            if (pointDistance <= distance) {\n              var grabLineOptions = interactivity.modes.grab.links;\n              var lineOpacity = grabLineOptions.opacity;\n              var opacityLine = lineOpacity - pointDistance * lineOpacity / distance;\n\n              if (opacityLine > 0) {\n                var optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.options.links.color;\n\n                if (!container.particles.grabLineColor) {\n                  var linksOptions = container.actualOptions.interactivity.modes.grab.links;\n                  container.particles.grabLineColor = Utils_1.getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n                }\n\n                var colorLine = Utils_1.getLinkColor(particle, undefined, container.particles.grabLineColor);\n\n                if (colorLine === undefined) {\n                  return;\n                }\n\n                container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n              }\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  }]);\n\n  return Grabber;\n}(ExternalInteractorBase_1.ExternalInteractorBase);\n\nexports.Grabber = Grabber;","map":{"version":3,"sources":["/Users/a1234/Desktop/projects/face-detection-app/node_modules/tsparticles/Interactions/External/Grabber.js"],"names":["Object","defineProperty","exports","value","Grabber","Utils_1","require","Enums_1","ExternalInteractorBase_1","container","mouse","interactivity","events","actualOptions","onHover","enable","position","hoverMode","mode","isInArray","HoverMode","grab","_a","options","status","Constants","mouseMoveEvent","mousePos","undefined","distance","retina","grabModeDistance","query","particles","quadTree","queryCircle","particle","pos","getPosition","pointDistance","getDistance","grabLineOptions","modes","links","lineOpacity","opacity","opacityLine","optColor","color","grabLineColor","linksOptions","getLinkRandomColor","blink","consent","colorLine","getLinkColor","canvas","drawGrabLine","ExternalInteractorBase"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Grabber = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nconst ExternalInteractorBase_1 = require(\"../../Core/ExternalInteractorBase\");\nclass Grabber extends ExternalInteractorBase_1.ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled() {\n        const container = this.container;\n        const mouse = container.interactivity.mouse;\n        const events = container.actualOptions.interactivity.events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        return Utils_1.isInArray(Enums_1.HoverMode.grab, hoverMode);\n    }\n    reset() {\n    }\n    interact() {\n        var _a;\n        const container = this.container;\n        const options = container.actualOptions;\n        const interactivity = options.interactivity;\n        if (interactivity.events.onHover.enable && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n            const mousePos = container.interactivity.mouse.position;\n            if (mousePos === undefined) {\n                return;\n            }\n            const distance = container.retina.grabModeDistance;\n            const query = container.particles.quadTree.queryCircle(mousePos, distance);\n            for (const particle of query) {\n                const pos = particle.getPosition();\n                const pointDistance = Utils_1.getDistance(pos, mousePos);\n                if (pointDistance <= distance) {\n                    const grabLineOptions = interactivity.modes.grab.links;\n                    const lineOpacity = grabLineOptions.opacity;\n                    const opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n                    if (opacityLine > 0) {\n                        const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.options.links.color;\n                        if (!container.particles.grabLineColor) {\n                            const linksOptions = container.actualOptions.interactivity.modes.grab.links;\n                            container.particles.grabLineColor = Utils_1.getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n                        }\n                        const colorLine = Utils_1.getLinkColor(particle, undefined, container.particles.grabLineColor);\n                        if (colorLine === undefined) {\n                            return;\n                        }\n                        container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n                    }\n                }\n            }\n        }\n    }\n}\nexports.Grabber = Grabber;\n"]},"metadata":{},"sourceType":"script"}