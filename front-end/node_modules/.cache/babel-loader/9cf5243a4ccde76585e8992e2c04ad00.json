{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/a1234/Desktop/projects/face-detection-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/a1234/Desktop/projects/face-detection-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/a1234/Desktop/projects/face-detection-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/a1234/Desktop/projects/face-detection-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Updater = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar Enums_1 = require(\"../../Enums\");\n\nfunction bounceHorizontal(data) {\n  if (!(data.outMode === Enums_1.OutMode.bounce || data.outMode === Enums_1.OutMode.bounceHorizontal || data.outMode === \"bounceHorizontal\" || data.outMode === Enums_1.OutMode.split)) {\n    return;\n  }\n\n  var velocity = data.particle.velocity.x;\n\n  if (!(data.direction === Enums_1.OutModeDirection.right && data.bounds.right >= data.canvasSize.width && velocity > 0 || data.direction === Enums_1.OutModeDirection.left && data.bounds.left <= 0 && velocity < 0)) {\n    return;\n  }\n\n  var newVelocity = Utils_1.getValue(data.particle.options.bounce.horizontal);\n  data.particle.velocity.x *= -newVelocity;\n  var minPos = data.offset.x + data.size;\n\n  if (data.bounds.right >= data.canvasSize.width) {\n    data.particle.position.x = data.canvasSize.width - minPos;\n  } else if (data.bounds.left <= 0) {\n    data.particle.position.x = minPos;\n  }\n\n  if (data.outMode === Enums_1.OutMode.split) {\n    data.particle.destroy();\n  }\n}\n\nfunction bounceVertical(data) {\n  if (!(data.outMode === Enums_1.OutMode.bounce || data.outMode === Enums_1.OutMode.bounceVertical || data.outMode === \"bounceVertical\" || data.outMode === Enums_1.OutMode.split)) {\n    return;\n  }\n\n  var velocity = data.particle.velocity.y;\n\n  if (!(data.direction === Enums_1.OutModeDirection.bottom && data.bounds.bottom >= data.canvasSize.height && velocity > 0 || data.direction === Enums_1.OutModeDirection.top && data.bounds.top <= 0 && velocity < 0)) {\n    return;\n  }\n\n  var newVelocity = Utils_1.getValue(data.particle.options.bounce.vertical);\n  data.particle.velocity.y *= -newVelocity;\n  var minPos = data.offset.y + data.size;\n\n  if (data.bounds.bottom >= data.canvasSize.height) {\n    data.particle.position.y = data.canvasSize.height - minPos;\n  } else if (data.bounds.top <= 0) {\n    data.particle.position.y = minPos;\n  }\n\n  if (data.outMode === Enums_1.OutMode.split) {\n    data.particle.destroy();\n  }\n}\n\nfunction checkDestroy(particle, destroy, value, minValue, maxValue) {\n  switch (destroy) {\n    case Enums_1.DestroyType.max:\n      if (value >= maxValue) {\n        particle.destroy();\n      }\n\n      break;\n\n    case Enums_1.DestroyType.min:\n      if (value <= minValue) {\n        particle.destroy();\n      }\n\n      break;\n  }\n}\n\nvar Updater = /*#__PURE__*/function () {\n  function Updater(container, particle) {\n    _classCallCheck(this, Updater);\n\n    this.container = container;\n    this.particle = particle;\n  }\n\n  _createClass(Updater, [{\n    key: \"update\",\n    value: function update(delta) {\n      if (this.particle.destroyed) {\n        return;\n      }\n\n      this.updateLife(delta);\n\n      if (this.particle.destroyed || this.particle.spawning) {\n        return;\n      }\n\n      this.updateOpacity(delta);\n      this.updateSize(delta);\n      this.updateAngle(delta);\n      this.updateTilt(delta);\n      this.updateRoll(delta);\n      this.updateWobble(delta);\n      this.updateColor(delta);\n      this.updateStrokeColor(delta);\n      this.updateOutModes(delta);\n    }\n  }, {\n    key: \"updateLife\",\n    value: function updateLife(delta) {\n      var particle = this.particle;\n      var justSpawned = false;\n\n      if (particle.spawning) {\n        particle.life.delayTime += delta.value;\n\n        if (particle.life.delayTime >= particle.life.delay) {\n          justSpawned = true;\n          particle.spawning = false;\n          particle.life.delayTime = 0;\n          particle.life.time = 0;\n        }\n      }\n\n      if (particle.life.duration === -1) {\n        return;\n      }\n\n      if (particle.spawning) {\n        return;\n      }\n\n      if (justSpawned) {\n        particle.life.time = 0;\n      } else {\n        particle.life.time += delta.value;\n      }\n\n      if (particle.life.time < particle.life.duration) {\n        return;\n      }\n\n      particle.life.time = 0;\n\n      if (particle.life.count > 0) {\n        particle.life.count--;\n      }\n\n      if (particle.life.count === 0) {\n        particle.destroy();\n        return;\n      }\n\n      var canvasSize = this.container.canvas.size;\n      particle.position.x = Utils_1.randomInRange(Utils_1.setRangeValue(0, canvasSize.width));\n      particle.position.y = Utils_1.randomInRange(Utils_1.setRangeValue(0, canvasSize.height));\n      particle.spawning = true;\n      particle.life.delayTime = 0;\n      particle.life.time = 0;\n      particle.reset();\n      var lifeOptions = particle.options.life;\n      particle.life.delay = Utils_1.getValue(lifeOptions.delay) * 1000;\n      particle.life.duration = Utils_1.getValue(lifeOptions.duration) * 1000;\n    }\n  }, {\n    key: \"updateOpacity\",\n    value: function updateOpacity(delta) {\n      var _a, _b;\n\n      var particle = this.particle;\n      var opacityOpt = particle.options.opacity;\n      var opacityAnim = opacityOpt.animation;\n      var minValue = particle.opacity.min;\n      var maxValue = particle.opacity.max;\n\n      if (!(!particle.destroyed && opacityAnim.enable && (opacityAnim.count <= 0 || particle.loops.opacity < opacityAnim.count))) {\n        return;\n      }\n\n      switch (particle.opacity.status) {\n        case Enums_1.AnimationStatus.increasing:\n          if (particle.opacity.value >= maxValue) {\n            particle.opacity.status = Enums_1.AnimationStatus.decreasing;\n            particle.loops.opacity++;\n          } else {\n            particle.opacity.value += ((_a = particle.opacity.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n          }\n\n          break;\n\n        case Enums_1.AnimationStatus.decreasing:\n          if (particle.opacity.value <= minValue) {\n            particle.opacity.status = Enums_1.AnimationStatus.increasing;\n            particle.loops.opacity++;\n          } else {\n            particle.opacity.value -= ((_b = particle.opacity.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n          }\n\n          break;\n      }\n\n      checkDestroy(particle, opacityAnim.destroy, particle.opacity.value, minValue, maxValue);\n\n      if (!particle.destroyed) {\n        particle.opacity.value = Utils_1.clamp(particle.opacity.value, minValue, maxValue);\n      }\n    }\n  }, {\n    key: \"updateSize\",\n    value: function updateSize(delta) {\n      var _a;\n\n      var particle = this.particle;\n      var sizeOpt = particle.options.size;\n      var sizeAnim = sizeOpt.animation;\n      var sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n      var minValue = particle.size.min;\n      var maxValue = particle.size.max;\n\n      if (!(!particle.destroyed && sizeAnim.enable && (sizeAnim.count <= 0 || particle.loops.size < sizeAnim.count))) {\n        return;\n      }\n\n      switch (particle.size.status) {\n        case Enums_1.AnimationStatus.increasing:\n          if (particle.size.value >= maxValue) {\n            particle.size.status = Enums_1.AnimationStatus.decreasing;\n            particle.loops.size++;\n          } else {\n            particle.size.value += sizeVelocity;\n          }\n\n          break;\n\n        case Enums_1.AnimationStatus.decreasing:\n          if (particle.size.value <= minValue) {\n            particle.size.status = Enums_1.AnimationStatus.increasing;\n            particle.loops.size++;\n          } else {\n            particle.size.value -= sizeVelocity;\n          }\n\n      }\n\n      checkDestroy(particle, sizeAnim.destroy, particle.size.value, minValue, maxValue);\n\n      if (!particle.destroyed) {\n        particle.size.value = Utils_1.clamp(particle.size.value, minValue, maxValue);\n      }\n    }\n  }, {\n    key: \"updateAngle\",\n    value: function updateAngle(delta) {\n      var _a;\n\n      var particle = this.particle;\n      var rotate = particle.options.rotate;\n      var rotateAnimation = rotate.animation;\n      var speed = ((_a = particle.rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n      var max = 2 * Math.PI;\n\n      if (!rotateAnimation.enable) {\n        return;\n      }\n\n      switch (particle.rotate.status) {\n        case Enums_1.AnimationStatus.increasing:\n          particle.rotate.value += speed;\n\n          if (particle.rotate.value > max) {\n            particle.rotate.value -= max;\n          }\n\n          break;\n\n        case Enums_1.AnimationStatus.decreasing:\n        default:\n          particle.rotate.value -= speed;\n\n          if (particle.rotate.value < 0) {\n            particle.rotate.value += max;\n          }\n\n          break;\n      }\n    }\n  }, {\n    key: \"updateTilt\",\n    value: function updateTilt(delta) {\n      var _a;\n\n      var particle = this.particle;\n      var tilt = particle.options.tilt;\n      var tiltAnimation = tilt.animation;\n      var speed = ((_a = particle.tilt.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n      var max = 2 * Math.PI;\n\n      if (!tiltAnimation.enable) {\n        return;\n      }\n\n      switch (particle.tilt.status) {\n        case Enums_1.AnimationStatus.increasing:\n          particle.tilt.value += speed;\n\n          if (particle.tilt.value > max) {\n            particle.tilt.value -= max;\n          }\n\n          break;\n\n        case Enums_1.AnimationStatus.decreasing:\n        default:\n          particle.tilt.value -= speed;\n\n          if (particle.tilt.value < 0) {\n            particle.tilt.value += max;\n          }\n\n          break;\n      }\n    }\n  }, {\n    key: \"updateRoll\",\n    value: function updateRoll(delta) {\n      var particle = this.particle;\n      var roll = particle.options.roll;\n      var speed = particle.rollSpeed * delta.factor;\n      var max = 2 * Math.PI;\n\n      if (!roll.enable) {\n        return;\n      }\n\n      particle.rollAngle += speed;\n\n      if (particle.rollAngle > max) {\n        particle.rollAngle -= max;\n      }\n    }\n  }, {\n    key: \"updateWobble\",\n    value: function updateWobble(delta) {\n      var particle = this.particle;\n      var wobble = particle.options.wobble;\n      var speed = particle.wobbleSpeed * delta.factor;\n      var distance = particle.wobbleDistance * delta.factor / (1000 / 60);\n      var max = 2 * Math.PI;\n\n      if (!wobble.enable) {\n        return;\n      }\n\n      particle.wobbleAngle += speed;\n\n      if (particle.wobbleAngle > max) {\n        particle.wobbleAngle -= max;\n      }\n\n      particle.position.x += distance * Math.cos(particle.wobbleAngle);\n      particle.position.y += distance * Math.abs(Math.sin(particle.wobbleAngle));\n    }\n  }, {\n    key: \"updateColor\",\n    value: function updateColor(delta) {\n      var _a, _b, _c;\n\n      var particle = this.particle;\n      var animationOptions = particle.options.color.animation;\n\n      if (((_a = particle.color) === null || _a === void 0 ? void 0 : _a.h) !== undefined) {\n        this.updateColorValue(particle, delta, particle.color.h, animationOptions.h, 360, false);\n      }\n\n      if (((_b = particle.color) === null || _b === void 0 ? void 0 : _b.s) !== undefined) {\n        this.updateColorValue(particle, delta, particle.color.s, animationOptions.s, 100, true);\n      }\n\n      if (((_c = particle.color) === null || _c === void 0 ? void 0 : _c.l) !== undefined) {\n        this.updateColorValue(particle, delta, particle.color.l, animationOptions.l, 100, true);\n      }\n    }\n  }, {\n    key: \"updateStrokeColor\",\n    value: function updateStrokeColor(delta) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n\n      var particle = this.particle;\n\n      if (!particle.stroke.color) {\n        return;\n      }\n\n      var animationOptions = particle.stroke.color.animation;\n      var valueAnimations = animationOptions;\n\n      if (valueAnimations.enable !== undefined) {\n        var hue = (_b = (_a = particle.strokeColor) === null || _a === void 0 ? void 0 : _a.h) !== null && _b !== void 0 ? _b : (_c = particle.color) === null || _c === void 0 ? void 0 : _c.h;\n\n        if (hue) {\n          this.updateColorValue(particle, delta, hue, valueAnimations, 360, false);\n        }\n      } else {\n        var hslAnimations = animationOptions;\n        var h = (_e = (_d = particle.strokeColor) === null || _d === void 0 ? void 0 : _d.h) !== null && _e !== void 0 ? _e : (_f = particle.color) === null || _f === void 0 ? void 0 : _f.h;\n\n        if (h) {\n          this.updateColorValue(particle, delta, h, hslAnimations.h, 360, false);\n        }\n\n        var s = (_h = (_g = particle.strokeColor) === null || _g === void 0 ? void 0 : _g.s) !== null && _h !== void 0 ? _h : (_j = particle.color) === null || _j === void 0 ? void 0 : _j.s;\n\n        if (s) {\n          this.updateColorValue(particle, delta, s, hslAnimations.s, 100, true);\n        }\n\n        var l = (_l = (_k = particle.strokeColor) === null || _k === void 0 ? void 0 : _k.l) !== null && _l !== void 0 ? _l : (_m = particle.color) === null || _m === void 0 ? void 0 : _m.l;\n\n        if (l) {\n          this.updateColorValue(particle, delta, l, hslAnimations.l, 100, true);\n        }\n      }\n    }\n  }, {\n    key: \"updateColorValue\",\n    value: function updateColorValue(particle, delta, value, valueAnimation, max, decrease) {\n      var _a;\n\n      var colorValue = value;\n\n      if (!colorValue || !valueAnimation.enable) {\n        return;\n      }\n\n      var offset = Utils_1.randomInRange(valueAnimation.offset);\n      var velocity = ((_a = value.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor + offset * 3.6;\n\n      if (!decrease || colorValue.status === Enums_1.AnimationStatus.increasing) {\n        colorValue.value += velocity;\n\n        if (decrease && colorValue.value > max) {\n          colorValue.status = Enums_1.AnimationStatus.decreasing;\n          colorValue.value -= colorValue.value % max;\n        }\n      } else {\n        colorValue.value -= velocity;\n\n        if (colorValue.value < 0) {\n          colorValue.status = Enums_1.AnimationStatus.increasing;\n          colorValue.value += colorValue.value;\n        }\n      }\n\n      if (colorValue.value > max) {\n        colorValue.value %= max;\n      }\n    }\n  }, {\n    key: \"updateOutModes\",\n    value: function updateOutModes(delta) {\n      var _a, _b, _c, _d;\n\n      var outModes = this.particle.options.move.outModes;\n      this.updateOutMode(delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, Enums_1.OutModeDirection.bottom);\n      this.updateOutMode(delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, Enums_1.OutModeDirection.left);\n      this.updateOutMode(delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, Enums_1.OutModeDirection.right);\n      this.updateOutMode(delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, Enums_1.OutModeDirection.top);\n    }\n  }, {\n    key: \"updateOutMode\",\n    value: function updateOutMode(delta, outMode, direction) {\n      var container = this.container;\n      var particle = this.particle;\n\n      switch (outMode) {\n        case Enums_1.OutMode.bounce:\n        case Enums_1.OutMode.bounceVertical:\n        case Enums_1.OutMode.bounceHorizontal:\n        case \"bounceVertical\":\n        case \"bounceHorizontal\":\n        case Enums_1.OutMode.split:\n          this.updateBounce(delta, direction, outMode);\n          break;\n\n        case Enums_1.OutMode.destroy:\n          if (!Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n            container.particles.remove(particle, undefined, true);\n          }\n\n          break;\n\n        case Enums_1.OutMode.out:\n          if (!Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n            this.fixOutOfCanvasPosition(direction);\n          }\n\n          break;\n\n        case Enums_1.OutMode.none:\n          this.bounceNone(direction);\n          break;\n      }\n    }\n  }, {\n    key: \"fixOutOfCanvasPosition\",\n    value: function fixOutOfCanvasPosition(direction) {\n      var container = this.container;\n      var particle = this.particle;\n      var wrap = particle.options.move.warp;\n      var canvasSize = container.canvas.size;\n      var newPos = {\n        bottom: canvasSize.height + particle.getRadius() - particle.offset.y,\n        left: -particle.getRadius() - particle.offset.x,\n        right: canvasSize.width + particle.getRadius() + particle.offset.x,\n        top: -particle.getRadius() - particle.offset.y\n      };\n      var sizeValue = particle.getRadius();\n      var nextBounds = Utils_1.calculateBounds(particle.position, sizeValue);\n\n      if (direction === Enums_1.OutModeDirection.right && nextBounds.left > canvasSize.width - particle.offset.x) {\n        particle.position.x = newPos.left;\n\n        if (!wrap) {\n          particle.position.y = Math.random() * canvasSize.height;\n        }\n      } else if (direction === Enums_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n        particle.position.x = newPos.right;\n\n        if (!wrap) {\n          particle.position.y = Math.random() * canvasSize.height;\n        }\n      }\n\n      if (direction === Enums_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height - particle.offset.y) {\n        if (!wrap) {\n          particle.position.x = Math.random() * canvasSize.width;\n        }\n\n        particle.position.y = newPos.top;\n      } else if (direction === Enums_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n        if (!wrap) {\n          particle.position.x = Math.random() * canvasSize.width;\n        }\n\n        particle.position.y = newPos.bottom;\n      }\n    }\n  }, {\n    key: \"updateBounce\",\n    value: function updateBounce(delta, direction, outMode) {\n      var container = this.container;\n      var particle = this.particle;\n      var handled = false;\n\n      var _iterator = _createForOfIteratorHelper(container.plugins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              plugin = _step$value[1];\n\n          if (plugin.particleBounce !== undefined) {\n            handled = plugin.particleBounce(particle, delta, direction);\n          }\n\n          if (handled) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (handled) {\n        return;\n      }\n\n      var pos = particle.getPosition(),\n          offset = particle.offset,\n          size = particle.getRadius(),\n          bounds = Utils_1.calculateBounds(pos, size),\n          canvasSize = container.canvas.size;\n      bounceHorizontal({\n        particle: particle,\n        outMode: outMode,\n        direction: direction,\n        bounds: bounds,\n        canvasSize: canvasSize,\n        offset: offset,\n        size: size\n      });\n      bounceVertical({\n        particle: particle,\n        outMode: outMode,\n        direction: direction,\n        bounds: bounds,\n        canvasSize: canvasSize,\n        offset: offset,\n        size: size\n      });\n    }\n  }, {\n    key: \"bounceNone\",\n    value: function bounceNone(direction) {\n      var particle = this.particle;\n\n      if (particle.options.move.distance.horizontal && (direction === Enums_1.OutModeDirection.left || direction === Enums_1.OutModeDirection.right) || particle.options.move.distance.vertical && (direction === Enums_1.OutModeDirection.top || direction === Enums_1.OutModeDirection.bottom)) {\n        return;\n      }\n\n      var gravityOptions = particle.options.move.gravity;\n      var container = this.container;\n\n      if (!gravityOptions.enable) {\n        if (!Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n          container.particles.remove(particle);\n        }\n      } else {\n        var position = particle.position;\n\n        if (!gravityOptions.inverse && position.y > container.canvas.size.height && direction === Enums_1.OutModeDirection.bottom || gravityOptions.inverse && position.y < 0 && direction === Enums_1.OutModeDirection.top) {\n          container.particles.remove(particle);\n        }\n      }\n    }\n  }]);\n\n  return Updater;\n}();\n\nexports.Updater = Updater;","map":{"version":3,"sources":["/Users/a1234/Desktop/projects/face-detection-app/node_modules/tsparticles/Core/Particle/Updater.js"],"names":["Object","defineProperty","exports","value","Updater","Utils_1","require","Enums_1","bounceHorizontal","data","outMode","OutMode","bounce","split","velocity","particle","x","direction","OutModeDirection","right","bounds","canvasSize","width","left","newVelocity","getValue","options","horizontal","minPos","offset","size","position","destroy","bounceVertical","y","bottom","height","top","vertical","checkDestroy","minValue","maxValue","DestroyType","max","min","container","delta","destroyed","updateLife","spawning","updateOpacity","updateSize","updateAngle","updateTilt","updateRoll","updateWobble","updateColor","updateStrokeColor","updateOutModes","justSpawned","life","delayTime","delay","time","duration","count","canvas","randomInRange","setRangeValue","reset","lifeOptions","_a","_b","opacityOpt","opacity","opacityAnim","animation","enable","loops","status","AnimationStatus","increasing","decreasing","factor","clamp","sizeOpt","sizeAnim","sizeVelocity","rotate","rotateAnimation","speed","Math","PI","tilt","tiltAnimation","roll","rollSpeed","rollAngle","wobble","wobbleSpeed","distance","wobbleDistance","wobbleAngle","cos","abs","sin","_c","animationOptions","color","h","undefined","updateColorValue","s","l","_d","_e","_f","_g","_h","_j","_k","_l","_m","stroke","valueAnimations","hue","strokeColor","hslAnimations","valueAnimation","decrease","colorValue","outModes","move","updateOutMode","default","updateBounce","isPointInside","getRadius","particles","remove","out","fixOutOfCanvasPosition","none","bounceNone","wrap","warp","newPos","sizeValue","nextBounds","calculateBounds","random","handled","plugins","plugin","particleBounce","pos","getPosition","gravityOptions","gravity","inverse"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Updater = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nfunction bounceHorizontal(data) {\n    if (!(data.outMode === Enums_1.OutMode.bounce ||\n        data.outMode === Enums_1.OutMode.bounceHorizontal ||\n        data.outMode === \"bounceHorizontal\" ||\n        data.outMode === Enums_1.OutMode.split)) {\n        return;\n    }\n    const velocity = data.particle.velocity.x;\n    if (!((data.direction === Enums_1.OutModeDirection.right && data.bounds.right >= data.canvasSize.width && velocity > 0) ||\n        (data.direction === Enums_1.OutModeDirection.left && data.bounds.left <= 0 && velocity < 0))) {\n        return;\n    }\n    const newVelocity = Utils_1.getValue(data.particle.options.bounce.horizontal);\n    data.particle.velocity.x *= -newVelocity;\n    const minPos = data.offset.x + data.size;\n    if (data.bounds.right >= data.canvasSize.width) {\n        data.particle.position.x = data.canvasSize.width - minPos;\n    }\n    else if (data.bounds.left <= 0) {\n        data.particle.position.x = minPos;\n    }\n    if (data.outMode === Enums_1.OutMode.split) {\n        data.particle.destroy();\n    }\n}\nfunction bounceVertical(data) {\n    if (!(data.outMode === Enums_1.OutMode.bounce ||\n        data.outMode === Enums_1.OutMode.bounceVertical ||\n        data.outMode === \"bounceVertical\" ||\n        data.outMode === Enums_1.OutMode.split)) {\n        return;\n    }\n    const velocity = data.particle.velocity.y;\n    if (!((data.direction === Enums_1.OutModeDirection.bottom &&\n        data.bounds.bottom >= data.canvasSize.height &&\n        velocity > 0) ||\n        (data.direction === Enums_1.OutModeDirection.top && data.bounds.top <= 0 && velocity < 0))) {\n        return;\n    }\n    const newVelocity = Utils_1.getValue(data.particle.options.bounce.vertical);\n    data.particle.velocity.y *= -newVelocity;\n    const minPos = data.offset.y + data.size;\n    if (data.bounds.bottom >= data.canvasSize.height) {\n        data.particle.position.y = data.canvasSize.height - minPos;\n    }\n    else if (data.bounds.top <= 0) {\n        data.particle.position.y = minPos;\n    }\n    if (data.outMode === Enums_1.OutMode.split) {\n        data.particle.destroy();\n    }\n}\nfunction checkDestroy(particle, destroy, value, minValue, maxValue) {\n    switch (destroy) {\n        case Enums_1.DestroyType.max:\n            if (value >= maxValue) {\n                particle.destroy();\n            }\n            break;\n        case Enums_1.DestroyType.min:\n            if (value <= minValue) {\n                particle.destroy();\n            }\n            break;\n    }\n}\nclass Updater {\n    constructor(container, particle) {\n        this.container = container;\n        this.particle = particle;\n    }\n    update(delta) {\n        if (this.particle.destroyed) {\n            return;\n        }\n        this.updateLife(delta);\n        if (this.particle.destroyed || this.particle.spawning) {\n            return;\n        }\n        this.updateOpacity(delta);\n        this.updateSize(delta);\n        this.updateAngle(delta);\n        this.updateTilt(delta);\n        this.updateRoll(delta);\n        this.updateWobble(delta);\n        this.updateColor(delta);\n        this.updateStrokeColor(delta);\n        this.updateOutModes(delta);\n    }\n    updateLife(delta) {\n        const particle = this.particle;\n        let justSpawned = false;\n        if (particle.spawning) {\n            particle.life.delayTime += delta.value;\n            if (particle.life.delayTime >= particle.life.delay) {\n                justSpawned = true;\n                particle.spawning = false;\n                particle.life.delayTime = 0;\n                particle.life.time = 0;\n            }\n        }\n        if (particle.life.duration === -1) {\n            return;\n        }\n        if (particle.spawning) {\n            return;\n        }\n        if (justSpawned) {\n            particle.life.time = 0;\n        }\n        else {\n            particle.life.time += delta.value;\n        }\n        if (particle.life.time < particle.life.duration) {\n            return;\n        }\n        particle.life.time = 0;\n        if (particle.life.count > 0) {\n            particle.life.count--;\n        }\n        if (particle.life.count === 0) {\n            particle.destroy();\n            return;\n        }\n        const canvasSize = this.container.canvas.size;\n        particle.position.x = Utils_1.randomInRange(Utils_1.setRangeValue(0, canvasSize.width));\n        particle.position.y = Utils_1.randomInRange(Utils_1.setRangeValue(0, canvasSize.height));\n        particle.spawning = true;\n        particle.life.delayTime = 0;\n        particle.life.time = 0;\n        particle.reset();\n        const lifeOptions = particle.options.life;\n        particle.life.delay = Utils_1.getValue(lifeOptions.delay) * 1000;\n        particle.life.duration = Utils_1.getValue(lifeOptions.duration) * 1000;\n    }\n    updateOpacity(delta) {\n        var _a, _b;\n        const particle = this.particle;\n        const opacityOpt = particle.options.opacity;\n        const opacityAnim = opacityOpt.animation;\n        const minValue = particle.opacity.min;\n        const maxValue = particle.opacity.max;\n        if (!(!particle.destroyed &&\n            opacityAnim.enable &&\n            (opacityAnim.count <= 0 || particle.loops.opacity < opacityAnim.count))) {\n            return;\n        }\n        switch (particle.opacity.status) {\n            case Enums_1.AnimationStatus.increasing:\n                if (particle.opacity.value >= maxValue) {\n                    particle.opacity.status = Enums_1.AnimationStatus.decreasing;\n                    particle.loops.opacity++;\n                }\n                else {\n                    particle.opacity.value += ((_a = particle.opacity.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n                }\n                break;\n            case Enums_1.AnimationStatus.decreasing:\n                if (particle.opacity.value <= minValue) {\n                    particle.opacity.status = Enums_1.AnimationStatus.increasing;\n                    particle.loops.opacity++;\n                }\n                else {\n                    particle.opacity.value -= ((_b = particle.opacity.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n                }\n                break;\n        }\n        checkDestroy(particle, opacityAnim.destroy, particle.opacity.value, minValue, maxValue);\n        if (!particle.destroyed) {\n            particle.opacity.value = Utils_1.clamp(particle.opacity.value, minValue, maxValue);\n        }\n    }\n    updateSize(delta) {\n        var _a;\n        const particle = this.particle;\n        const sizeOpt = particle.options.size;\n        const sizeAnim = sizeOpt.animation;\n        const sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n        const minValue = particle.size.min;\n        const maxValue = particle.size.max;\n        if (!(!particle.destroyed && sizeAnim.enable && (sizeAnim.count <= 0 || particle.loops.size < sizeAnim.count))) {\n            return;\n        }\n        switch (particle.size.status) {\n            case Enums_1.AnimationStatus.increasing:\n                if (particle.size.value >= maxValue) {\n                    particle.size.status = Enums_1.AnimationStatus.decreasing;\n                    particle.loops.size++;\n                }\n                else {\n                    particle.size.value += sizeVelocity;\n                }\n                break;\n            case Enums_1.AnimationStatus.decreasing:\n                if (particle.size.value <= minValue) {\n                    particle.size.status = Enums_1.AnimationStatus.increasing;\n                    particle.loops.size++;\n                }\n                else {\n                    particle.size.value -= sizeVelocity;\n                }\n        }\n        checkDestroy(particle, sizeAnim.destroy, particle.size.value, minValue, maxValue);\n        if (!particle.destroyed) {\n            particle.size.value = Utils_1.clamp(particle.size.value, minValue, maxValue);\n        }\n    }\n    updateAngle(delta) {\n        var _a;\n        const particle = this.particle;\n        const rotate = particle.options.rotate;\n        const rotateAnimation = rotate.animation;\n        const speed = ((_a = particle.rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n        const max = 2 * Math.PI;\n        if (!rotateAnimation.enable) {\n            return;\n        }\n        switch (particle.rotate.status) {\n            case Enums_1.AnimationStatus.increasing:\n                particle.rotate.value += speed;\n                if (particle.rotate.value > max) {\n                    particle.rotate.value -= max;\n                }\n                break;\n            case Enums_1.AnimationStatus.decreasing:\n            default:\n                particle.rotate.value -= speed;\n                if (particle.rotate.value < 0) {\n                    particle.rotate.value += max;\n                }\n                break;\n        }\n    }\n    updateTilt(delta) {\n        var _a;\n        const particle = this.particle;\n        const tilt = particle.options.tilt;\n        const tiltAnimation = tilt.animation;\n        const speed = ((_a = particle.tilt.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n        const max = 2 * Math.PI;\n        if (!tiltAnimation.enable) {\n            return;\n        }\n        switch (particle.tilt.status) {\n            case Enums_1.AnimationStatus.increasing:\n                particle.tilt.value += speed;\n                if (particle.tilt.value > max) {\n                    particle.tilt.value -= max;\n                }\n                break;\n            case Enums_1.AnimationStatus.decreasing:\n            default:\n                particle.tilt.value -= speed;\n                if (particle.tilt.value < 0) {\n                    particle.tilt.value += max;\n                }\n                break;\n        }\n    }\n    updateRoll(delta) {\n        const particle = this.particle;\n        const roll = particle.options.roll;\n        const speed = particle.rollSpeed * delta.factor;\n        const max = 2 * Math.PI;\n        if (!roll.enable) {\n            return;\n        }\n        particle.rollAngle += speed;\n        if (particle.rollAngle > max) {\n            particle.rollAngle -= max;\n        }\n    }\n    updateWobble(delta) {\n        const particle = this.particle;\n        const wobble = particle.options.wobble;\n        const speed = particle.wobbleSpeed * delta.factor;\n        const distance = (particle.wobbleDistance * delta.factor) / (1000 / 60);\n        const max = 2 * Math.PI;\n        if (!wobble.enable) {\n            return;\n        }\n        particle.wobbleAngle += speed;\n        if (particle.wobbleAngle > max) {\n            particle.wobbleAngle -= max;\n        }\n        particle.position.x += distance * Math.cos(particle.wobbleAngle);\n        particle.position.y += distance * Math.abs(Math.sin(particle.wobbleAngle));\n    }\n    updateColor(delta) {\n        var _a, _b, _c;\n        const particle = this.particle;\n        const animationOptions = particle.options.color.animation;\n        if (((_a = particle.color) === null || _a === void 0 ? void 0 : _a.h) !== undefined) {\n            this.updateColorValue(particle, delta, particle.color.h, animationOptions.h, 360, false);\n        }\n        if (((_b = particle.color) === null || _b === void 0 ? void 0 : _b.s) !== undefined) {\n            this.updateColorValue(particle, delta, particle.color.s, animationOptions.s, 100, true);\n        }\n        if (((_c = particle.color) === null || _c === void 0 ? void 0 : _c.l) !== undefined) {\n            this.updateColorValue(particle, delta, particle.color.l, animationOptions.l, 100, true);\n        }\n    }\n    updateStrokeColor(delta) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n        const particle = this.particle;\n        if (!particle.stroke.color) {\n            return;\n        }\n        const animationOptions = particle.stroke.color.animation;\n        const valueAnimations = animationOptions;\n        if (valueAnimations.enable !== undefined) {\n            const hue = (_b = (_a = particle.strokeColor) === null || _a === void 0 ? void 0 : _a.h) !== null && _b !== void 0 ? _b : (_c = particle.color) === null || _c === void 0 ? void 0 : _c.h;\n            if (hue) {\n                this.updateColorValue(particle, delta, hue, valueAnimations, 360, false);\n            }\n        }\n        else {\n            const hslAnimations = animationOptions;\n            const h = (_e = (_d = particle.strokeColor) === null || _d === void 0 ? void 0 : _d.h) !== null && _e !== void 0 ? _e : (_f = particle.color) === null || _f === void 0 ? void 0 : _f.h;\n            if (h) {\n                this.updateColorValue(particle, delta, h, hslAnimations.h, 360, false);\n            }\n            const s = (_h = (_g = particle.strokeColor) === null || _g === void 0 ? void 0 : _g.s) !== null && _h !== void 0 ? _h : (_j = particle.color) === null || _j === void 0 ? void 0 : _j.s;\n            if (s) {\n                this.updateColorValue(particle, delta, s, hslAnimations.s, 100, true);\n            }\n            const l = (_l = (_k = particle.strokeColor) === null || _k === void 0 ? void 0 : _k.l) !== null && _l !== void 0 ? _l : (_m = particle.color) === null || _m === void 0 ? void 0 : _m.l;\n            if (l) {\n                this.updateColorValue(particle, delta, l, hslAnimations.l, 100, true);\n            }\n        }\n    }\n    updateColorValue(particle, delta, value, valueAnimation, max, decrease) {\n        var _a;\n        const colorValue = value;\n        if (!colorValue || !valueAnimation.enable) {\n            return;\n        }\n        const offset = Utils_1.randomInRange(valueAnimation.offset);\n        const velocity = ((_a = value.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor + offset * 3.6;\n        if (!decrease || colorValue.status === Enums_1.AnimationStatus.increasing) {\n            colorValue.value += velocity;\n            if (decrease && colorValue.value > max) {\n                colorValue.status = Enums_1.AnimationStatus.decreasing;\n                colorValue.value -= colorValue.value % max;\n            }\n        }\n        else {\n            colorValue.value -= velocity;\n            if (colorValue.value < 0) {\n                colorValue.status = Enums_1.AnimationStatus.increasing;\n                colorValue.value += colorValue.value;\n            }\n        }\n        if (colorValue.value > max) {\n            colorValue.value %= max;\n        }\n    }\n    updateOutModes(delta) {\n        var _a, _b, _c, _d;\n        const outModes = this.particle.options.move.outModes;\n        this.updateOutMode(delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, Enums_1.OutModeDirection.bottom);\n        this.updateOutMode(delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, Enums_1.OutModeDirection.left);\n        this.updateOutMode(delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, Enums_1.OutModeDirection.right);\n        this.updateOutMode(delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, Enums_1.OutModeDirection.top);\n    }\n    updateOutMode(delta, outMode, direction) {\n        const container = this.container;\n        const particle = this.particle;\n        switch (outMode) {\n            case Enums_1.OutMode.bounce:\n            case Enums_1.OutMode.bounceVertical:\n            case Enums_1.OutMode.bounceHorizontal:\n            case \"bounceVertical\":\n            case \"bounceHorizontal\":\n            case Enums_1.OutMode.split:\n                this.updateBounce(delta, direction, outMode);\n                break;\n            case Enums_1.OutMode.destroy:\n                if (!Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                    container.particles.remove(particle, undefined, true);\n                }\n                break;\n            case Enums_1.OutMode.out:\n                if (!Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                    this.fixOutOfCanvasPosition(direction);\n                }\n                break;\n            case Enums_1.OutMode.none:\n                this.bounceNone(direction);\n                break;\n        }\n    }\n    fixOutOfCanvasPosition(direction) {\n        const container = this.container;\n        const particle = this.particle;\n        const wrap = particle.options.move.warp;\n        const canvasSize = container.canvas.size;\n        const newPos = {\n            bottom: canvasSize.height + particle.getRadius() - particle.offset.y,\n            left: -particle.getRadius() - particle.offset.x,\n            right: canvasSize.width + particle.getRadius() + particle.offset.x,\n            top: -particle.getRadius() - particle.offset.y,\n        };\n        const sizeValue = particle.getRadius();\n        const nextBounds = Utils_1.calculateBounds(particle.position, sizeValue);\n        if (direction === Enums_1.OutModeDirection.right && nextBounds.left > canvasSize.width - particle.offset.x) {\n            particle.position.x = newPos.left;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n            }\n        }\n        else if (direction === Enums_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n            particle.position.x = newPos.right;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n            }\n        }\n        if (direction === Enums_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height - particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n            }\n            particle.position.y = newPos.top;\n        }\n        else if (direction === Enums_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n            }\n            particle.position.y = newPos.bottom;\n        }\n    }\n    updateBounce(delta, direction, outMode) {\n        const container = this.container;\n        const particle = this.particle;\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleBounce !== undefined) {\n                handled = plugin.particleBounce(particle, delta, direction);\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (handled) {\n            return;\n        }\n        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = Utils_1.calculateBounds(pos, size), canvasSize = container.canvas.size;\n        bounceHorizontal({ particle, outMode, direction, bounds, canvasSize, offset, size });\n        bounceVertical({ particle, outMode, direction, bounds, canvasSize, offset, size });\n    }\n    bounceNone(direction) {\n        const particle = this.particle;\n        if ((particle.options.move.distance.horizontal &&\n            (direction === Enums_1.OutModeDirection.left || direction === Enums_1.OutModeDirection.right)) ||\n            (particle.options.move.distance.vertical &&\n                (direction === Enums_1.OutModeDirection.top || direction === Enums_1.OutModeDirection.bottom))) {\n            return;\n        }\n        const gravityOptions = particle.options.move.gravity;\n        const container = this.container;\n        if (!gravityOptions.enable) {\n            if (!Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            const position = particle.position;\n            if ((!gravityOptions.inverse &&\n                position.y > container.canvas.size.height &&\n                direction === Enums_1.OutModeDirection.bottom) ||\n                (gravityOptions.inverse && position.y < 0 && direction === Enums_1.OutModeDirection.top)) {\n                container.particles.remove(particle);\n            }\n        }\n    }\n}\nexports.Updater = Updater;\n"]},"metadata":{},"sourceType":"script"}