{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/a1234/Desktop/projects/face-detection-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/a1234/Desktop/projects/face-detection-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/a1234/Desktop/projects/face-detection-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/a1234/Desktop/projects/face-detection-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mover = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar Enums_1 = require(\"../../Enums\");\n\nfunction applyDistance(particle) {\n  var initialPosition = particle.initialPosition;\n\n  var _Utils_1$getDistances = Utils_1.getDistances(initialPosition, particle.position),\n      dx = _Utils_1$getDistances.dx,\n      dy = _Utils_1$getDistances.dy;\n\n  var dxFixed = Math.abs(dx),\n      dyFixed = Math.abs(dy);\n  var hDistance = particle.maxDistance.horizontal;\n  var vDistance = particle.maxDistance.vertical;\n\n  if (!hDistance && !vDistance) {\n    return;\n  }\n\n  if ((hDistance && dxFixed >= hDistance || vDistance && dyFixed >= vDistance) && !particle.misplaced) {\n    particle.misplaced = !!hDistance && dxFixed > hDistance || !!vDistance && dyFixed > vDistance;\n\n    if (hDistance) {\n      particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n    }\n\n    if (vDistance) {\n      particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n    }\n  } else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n    particle.misplaced = false;\n  } else if (particle.misplaced) {\n    var pos = particle.position,\n        vel = particle.velocity;\n\n    if (hDistance && (pos.x < initialPosition.x && vel.x < 0 || pos.x > initialPosition.x && vel.x > 0)) {\n      vel.x *= -Math.random();\n    }\n\n    if (vDistance && (pos.y < initialPosition.y && vel.y < 0 || pos.y > initialPosition.y && vel.y > 0)) {\n      vel.y *= -Math.random();\n    }\n  }\n}\n\nvar Mover = /*#__PURE__*/function () {\n  function Mover(container, particle) {\n    _classCallCheck(this, Mover);\n\n    this.container = container;\n    this.particle = particle;\n  }\n\n  _createClass(Mover, [{\n    key: \"move\",\n    value: function move(delta) {\n      var particle = this.particle;\n      particle.bubble.inRange = false;\n      particle.links = [];\n\n      var _iterator = _createForOfIteratorHelper(this.container.plugins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              plugin = _step$value[1];\n\n          if (particle.destroyed) {\n            break;\n          }\n\n          if (plugin.particleUpdate) {\n            plugin.particleUpdate(particle, delta);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (particle.destroyed) {\n        return;\n      }\n\n      this.moveParticle(delta);\n      this.moveParallax();\n    }\n  }, {\n    key: \"moveParticle\",\n    value: function moveParticle(delta) {\n      var _a, _b, _c;\n\n      var particle = this.particle;\n      var particlesOptions = particle.options;\n\n      if (!particlesOptions.move.enable) {\n        return;\n      }\n\n      var container = this.container;\n      var slowFactor = this.getProximitySpeedFactor();\n      var baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : Utils_1.getRangeValue(particle.options.move.speed) * container.retina.pixelRatio) * container.retina.reduceFactor;\n      var maxSize = Utils_1.getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n      var sizeFactor = particlesOptions.move.size ? particle.getRadius() / maxSize : 1;\n      var moveSpeed = baseSpeed / 2 * sizeFactor * slowFactor * delta.factor;\n      var moveDrift = (_b = particle.moveDrift) !== null && _b !== void 0 ? _b : Utils_1.getRangeValue(particle.options.move.drift) * container.retina.pixelRatio;\n      this.applyPath(delta);\n      var gravityOptions = particlesOptions.move.gravity;\n      var gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n\n      if (gravityOptions.enable) {\n        particle.velocity.y += gravityFactor * (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n      }\n\n      if (moveSpeed) {\n        particle.velocity.x += moveDrift * delta.factor / (60 * moveSpeed);\n      }\n\n      particle.velocity.multTo(1 - particle.options.move.decay);\n      var velocity = particle.velocity.mult(moveSpeed);\n      var maxSpeed = (_c = particle.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n\n      if (gravityOptions.enable && (!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed || gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed) && gravityOptions.maxSpeed > 0) {\n        velocity.y = gravityFactor * maxSpeed;\n\n        if (moveSpeed) {\n          particle.velocity.y = velocity.y / moveSpeed;\n        }\n      }\n\n      var zIndexOptions = particle.options.zIndex,\n          zVelocityFactor = 1 - zIndexOptions.velocityRate * particle.zIndexFactor;\n      velocity.multTo(zVelocityFactor);\n      particle.position.addTo(velocity);\n\n      if (particlesOptions.move.vibrate) {\n        particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n        particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n      }\n\n      var initialPosition = particle.initialPosition;\n      var initialDistance = Utils_1.getDistance(initialPosition, particle.position);\n\n      if (particle.maxDistance) {\n        if (initialDistance >= particle.maxDistance && !particle.misplaced) {\n          particle.misplaced = initialDistance > particle.maxDistance;\n          particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n          particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        } else if (initialDistance < particle.maxDistance && particle.misplaced) {\n          particle.misplaced = false;\n        } else if (particle.misplaced) {\n          if (particle.position.x < initialPosition.x && particle.velocity.x < 0 || particle.position.x > initialPosition.x && particle.velocity.x > 0) {\n            particle.velocity.x *= -Math.random();\n          }\n\n          if (particle.position.y < initialPosition.y && particle.velocity.y < 0 || particle.position.y > initialPosition.y && particle.velocity.y > 0) {\n            particle.velocity.y *= -Math.random();\n          }\n        }\n      }\n\n      applyDistance(particle);\n    }\n  }, {\n    key: \"applyPath\",\n    value: function applyPath(delta) {\n      var particle = this.particle;\n      var particlesOptions = particle.options;\n      var pathOptions = particlesOptions.move.path;\n      var pathEnabled = pathOptions.enable;\n\n      if (!pathEnabled) {\n        return;\n      }\n\n      var container = this.container;\n\n      if (particle.lastPathTime <= particle.pathDelay) {\n        particle.lastPathTime += delta.value;\n        return;\n      }\n\n      var generator = container.pathGenerator;\n\n      if (pathOptions.generator) {\n        var customGenerator = Utils_1.Plugins.getPathGenerator(pathOptions.generator);\n\n        if (customGenerator) {\n          generator = customGenerator;\n        }\n      }\n\n      var path = generator.generate(particle);\n      particle.velocity.addTo(path);\n\n      if (pathOptions.clamp) {\n        particle.velocity.x = Utils_1.clamp(particle.velocity.x, -1, 1);\n        particle.velocity.y = Utils_1.clamp(particle.velocity.y, -1, 1);\n      }\n\n      particle.lastPathTime -= particle.pathDelay;\n    }\n  }, {\n    key: \"moveParallax\",\n    value: function moveParallax() {\n      var container = this.container;\n      var options = container.actualOptions;\n\n      if (Utils_1.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n        return;\n      }\n\n      var particle = this.particle;\n      var parallaxForce = options.interactivity.events.onHover.parallax.force;\n      var mousePos = container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return;\n      }\n\n      var canvasCenter = {\n        x: container.canvas.size.width / 2,\n        y: container.canvas.size.height / 2\n      };\n      var parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n      var factor = particle.getRadius() / parallaxForce;\n      var tmp = {\n        x: (mousePos.x - canvasCenter.x) * factor,\n        y: (mousePos.y - canvasCenter.y) * factor\n      };\n      particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n      particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n  }, {\n    key: \"getProximitySpeedFactor\",\n    value: function getProximitySpeedFactor() {\n      var container = this.container;\n      var options = container.actualOptions;\n      var active = Utils_1.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n\n      if (!active) {\n        return 1;\n      }\n\n      var mousePos = this.container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return 1;\n      }\n\n      var particlePos = this.particle.getPosition();\n      var dist = Utils_1.getDistance(mousePos, particlePos);\n      var radius = container.retina.slowModeRadius;\n\n      if (dist > radius) {\n        return 1;\n      }\n\n      var proximityFactor = dist / radius || 0;\n      var slowFactor = options.interactivity.modes.slow.factor;\n      return proximityFactor / slowFactor;\n    }\n  }]);\n\n  return Mover;\n}();\n\nexports.Mover = Mover;","map":{"version":3,"sources":["/Users/a1234/Desktop/projects/face-detection-app/node_modules/tsparticles/Core/Particle/Mover.js"],"names":["Object","defineProperty","exports","value","Mover","Utils_1","require","Enums_1","applyDistance","particle","initialPosition","getDistances","position","dx","dy","dxFixed","Math","abs","dyFixed","hDistance","maxDistance","horizontal","vDistance","vertical","misplaced","velocity","x","y","pos","vel","random","container","delta","bubble","inRange","links","plugins","plugin","destroyed","particleUpdate","moveParticle","moveParallax","_a","_b","_c","particlesOptions","options","move","enable","slowFactor","getProximitySpeedFactor","baseSpeed","moveSpeed","getRangeValue","speed","retina","pixelRatio","reduceFactor","maxSize","getRangeMax","size","sizeFactor","getRadius","factor","moveDrift","drift","applyPath","gravityOptions","gravity","gravityFactor","inverse","acceleration","multTo","decay","mult","maxSpeed","zIndexOptions","zIndex","zVelocityFactor","velocityRate","zIndexFactor","addTo","vibrate","sin","cos","initialDistance","getDistance","pathOptions","path","pathEnabled","lastPathTime","pathDelay","generator","pathGenerator","customGenerator","Plugins","getPathGenerator","generate","clamp","actualOptions","isSsr","interactivity","events","onHover","parallax","parallaxForce","force","mousePos","mouse","canvasCenter","canvas","width","height","parallaxSmooth","smooth","tmp","offset","active","isInArray","HoverMode","slow","mode","particlePos","getPosition","dist","radius","slowModeRadius","proximityFactor","modes"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Mover = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nfunction applyDistance(particle) {\n    const initialPosition = particle.initialPosition;\n    const { dx, dy } = Utils_1.getDistances(initialPosition, particle.position);\n    const dxFixed = Math.abs(dx), dyFixed = Math.abs(dy);\n    const hDistance = particle.maxDistance.horizontal;\n    const vDistance = particle.maxDistance.vertical;\n    if (!hDistance && !vDistance) {\n        return;\n    }\n    if (((hDistance && dxFixed >= hDistance) || (vDistance && dyFixed >= vDistance)) && !particle.misplaced) {\n        particle.misplaced = (!!hDistance && dxFixed > hDistance) || (!!vDistance && dyFixed > vDistance);\n        if (hDistance) {\n            particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        }\n        if (vDistance) {\n            particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        }\n    }\n    else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n        particle.misplaced = false;\n    }\n    else if (particle.misplaced) {\n        const pos = particle.position, vel = particle.velocity;\n        if (hDistance && ((pos.x < initialPosition.x && vel.x < 0) || (pos.x > initialPosition.x && vel.x > 0))) {\n            vel.x *= -Math.random();\n        }\n        if (vDistance && ((pos.y < initialPosition.y && vel.y < 0) || (pos.y > initialPosition.y && vel.y > 0))) {\n            vel.y *= -Math.random();\n        }\n    }\n}\nclass Mover {\n    constructor(container, particle) {\n        this.container = container;\n        this.particle = particle;\n    }\n    move(delta) {\n        const particle = this.particle;\n        particle.bubble.inRange = false;\n        particle.links = [];\n        for (const [, plugin] of this.container.plugins) {\n            if (particle.destroyed) {\n                break;\n            }\n            if (plugin.particleUpdate) {\n                plugin.particleUpdate(particle, delta);\n            }\n        }\n        if (particle.destroyed) {\n            return;\n        }\n        this.moveParticle(delta);\n        this.moveParallax();\n    }\n    moveParticle(delta) {\n        var _a, _b, _c;\n        const particle = this.particle;\n        const particlesOptions = particle.options;\n        if (!particlesOptions.move.enable) {\n            return;\n        }\n        const container = this.container;\n        const slowFactor = this.getProximitySpeedFactor();\n        const baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : Utils_1.getRangeValue(particle.options.move.speed) * container.retina.pixelRatio) *\n            container.retina.reduceFactor;\n        const maxSize = Utils_1.getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n        const sizeFactor = particlesOptions.move.size ? particle.getRadius() / maxSize : 1;\n        const moveSpeed = (baseSpeed / 2) * sizeFactor * slowFactor * delta.factor;\n        const moveDrift = (_b = particle.moveDrift) !== null && _b !== void 0 ? _b : Utils_1.getRangeValue(particle.options.move.drift) * container.retina.pixelRatio;\n        this.applyPath(delta);\n        const gravityOptions = particlesOptions.move.gravity;\n        const gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n        if (gravityOptions.enable) {\n            particle.velocity.y += (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (60 * moveSpeed);\n        }\n        if (moveSpeed) {\n            particle.velocity.x += (moveDrift * delta.factor) / (60 * moveSpeed);\n        }\n        particle.velocity.multTo(1 - particle.options.move.decay);\n        const velocity = particle.velocity.mult(moveSpeed);\n        const maxSpeed = (_c = particle.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n        if (gravityOptions.enable &&\n            ((!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed) ||\n                (gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed)) &&\n            gravityOptions.maxSpeed > 0) {\n            velocity.y = gravityFactor * maxSpeed;\n            if (moveSpeed) {\n                particle.velocity.y = velocity.y / moveSpeed;\n            }\n        }\n        const zIndexOptions = particle.options.zIndex, zVelocityFactor = 1 - zIndexOptions.velocityRate * particle.zIndexFactor;\n        velocity.multTo(zVelocityFactor);\n        particle.position.addTo(velocity);\n        if (particlesOptions.move.vibrate) {\n            particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n            particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n        }\n        const initialPosition = particle.initialPosition;\n        const initialDistance = Utils_1.getDistance(initialPosition, particle.position);\n        if (particle.maxDistance) {\n            if (initialDistance >= particle.maxDistance && !particle.misplaced) {\n                particle.misplaced = initialDistance > particle.maxDistance;\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n            }\n            else if (initialDistance < particle.maxDistance && particle.misplaced) {\n                particle.misplaced = false;\n            }\n            else if (particle.misplaced) {\n                if ((particle.position.x < initialPosition.x && particle.velocity.x < 0) ||\n                    (particle.position.x > initialPosition.x && particle.velocity.x > 0)) {\n                    particle.velocity.x *= -Math.random();\n                }\n                if ((particle.position.y < initialPosition.y && particle.velocity.y < 0) ||\n                    (particle.position.y > initialPosition.y && particle.velocity.y > 0)) {\n                    particle.velocity.y *= -Math.random();\n                }\n            }\n        }\n        applyDistance(particle);\n    }\n    applyPath(delta) {\n        const particle = this.particle;\n        const particlesOptions = particle.options;\n        const pathOptions = particlesOptions.move.path;\n        const pathEnabled = pathOptions.enable;\n        if (!pathEnabled) {\n            return;\n        }\n        const container = this.container;\n        if (particle.lastPathTime <= particle.pathDelay) {\n            particle.lastPathTime += delta.value;\n            return;\n        }\n        let generator = container.pathGenerator;\n        if (pathOptions.generator) {\n            const customGenerator = Utils_1.Plugins.getPathGenerator(pathOptions.generator);\n            if (customGenerator) {\n                generator = customGenerator;\n            }\n        }\n        const path = generator.generate(particle);\n        particle.velocity.addTo(path);\n        if (pathOptions.clamp) {\n            particle.velocity.x = Utils_1.clamp(particle.velocity.x, -1, 1);\n            particle.velocity.y = Utils_1.clamp(particle.velocity.y, -1, 1);\n        }\n        particle.lastPathTime -= particle.pathDelay;\n    }\n    moveParallax() {\n        const container = this.container;\n        const options = container.actualOptions;\n        if (Utils_1.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n            return;\n        }\n        const particle = this.particle;\n        const parallaxForce = options.interactivity.events.onHover.parallax.force;\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const canvasCenter = {\n            x: container.canvas.size.width / 2,\n            y: container.canvas.size.height / 2,\n        };\n        const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n        const factor = particle.getRadius() / parallaxForce;\n        const tmp = {\n            x: (mousePos.x - canvasCenter.x) * factor,\n            y: (mousePos.y - canvasCenter.y) * factor,\n        };\n        particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n        particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n    getProximitySpeedFactor() {\n        const container = this.container;\n        const options = container.actualOptions;\n        const active = Utils_1.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n        if (!active) {\n            return 1;\n        }\n        const mousePos = this.container.interactivity.mouse.position;\n        if (!mousePos) {\n            return 1;\n        }\n        const particlePos = this.particle.getPosition();\n        const dist = Utils_1.getDistance(mousePos, particlePos);\n        const radius = container.retina.slowModeRadius;\n        if (dist > radius) {\n            return 1;\n        }\n        const proximityFactor = dist / radius || 0;\n        const slowFactor = options.interactivity.modes.slow.factor;\n        return proximityFactor / slowFactor;\n    }\n}\nexports.Mover = Mover;\n"]},"metadata":{},"sourceType":"script"}